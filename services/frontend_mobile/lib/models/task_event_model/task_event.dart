// ignore_for_file: non_constant_identifier_names

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

// required: associates our `user_model.dart` with the code generated by Freezed
part 'task_event.freezed.dart';
// optional: Since our UserModel class is serializable, we must add this line.
// But if UserModel was not serializable, we could skip it.
part 'task_event.g.dart';

class TimestampConverter implements JsonConverter<DateTime, Timestamp> {
  const TimestampConverter();

  @override
  DateTime fromJson(Timestamp json) => json.toDate();

  @override
  Timestamp toJson(DateTime object) => Timestamp.fromDate(object);
}

class TimestampNullableConverter
    implements JsonConverter<DateTime?, Timestamp?> {
  const TimestampNullableConverter();

  @override
  DateTime? fromJson(Timestamp? json) => json?.toDate();

  @override
  Timestamp? toJson(DateTime? object) =>
      object == null ? null : Timestamp.fromDate(object);
}

@freezed
class TaskEvent with _$TaskEvent {
  const factory TaskEvent({
    String? event_id,
    required String event_type,
    @TimestampConverter() DateTime? timestamp,
    String? task_id,
    required String user_id,
    String? status,
    Map<String, dynamic>? additional_data,
  }) = _TaskEvent;

  factory TaskEvent.fromJson(Map<String, Object?> json) =>
      _$TaskEventFromJson(json);

  factory TaskEvent.defaultEvent() {
    return const TaskEvent(
        event_type: 'defaultEvent', user_id: '',event_id: '',status:'');
  }
}

@freezed
class TaskAssigned with _$TaskAssigned {
  const factory TaskAssigned({
    required String task_id,
    required String assigned_to_id,
  }) = _TaskAssigned;

  factory TaskAssigned.fromJson(Map<String, Object?> json) =>
      _$TaskAssignedFromJson(json);
}

@freezed
class TaskCancelled with _$TaskCancelled {
  const factory TaskCancelled({
    required String task_id,
  }) = _TaskCancelled;

  factory TaskCancelled.fromJson(Map<String, Object?> json) =>
      _$TaskCancelledFromJson(json);
}

@freezed
class TaskCommentAdded with _$TaskCommentAdded {
  const factory TaskCommentAdded({
    required String task_id,
    required String user_id,
    required String comment,
  }) = _TaskCommentAdded;

  factory TaskCommentAdded.fromJson(Map<String, Object?> json) =>
      _$TaskCommentAddedFromJson(json);
}

@freezed
class TaskCompleted with _$TaskCompleted {
  const factory TaskCompleted({
    required String task_id,
    required String completed_by_id,
    List<String>? attachments,
    bool? marked_completed,
    bool? verified,
    String? verification_method,
  }) = _TaskCompleted;

  factory TaskCompleted.fromJson(Map<String, Object?> json) =>
      _$TaskCompletedFromJson(json);
}

@freezed
class TaskExpired with _$TaskExpired {
  const factory TaskExpired({
    required String task_id,
  }) = _TaskExpired;

  factory TaskExpired.fromJson(Map<String, Object?> json) =>
      _$TaskExpiredFromJson(json);
}

@freezed
class TaskRatingUpdate with _$TaskRatingUpdate {
  const factory TaskRatingUpdate({
    required String task_id,
    required String user_id,
  }) = _TaskRatingUpdate;

  factory TaskRatingUpdate.fromJson(Map<String, Object?> json) =>
      _$TaskRatingUpdateFromJson(json);
}

@freezed
class TaskRewarded with _$TaskRewarded {
  const factory TaskRewarded({
    required String task_id,
    required String user_id,
  }) = _TaskRewarded;

  factory TaskRewarded.fromJson(Map<String, Object?> json) =>
      _$TaskRewardedFromJson(json);
}

@freezed
class TaskUpdated with _$TaskUpdated {
  const factory TaskUpdated({
    required String task_id,
    required Map<String, dynamic> updated_fields,
  }) = _TaskUpdated;

  factory TaskUpdated.fromJson(Map<String, Object?> json) =>
      _$TaskUpdatedFromJson(json);
}

@freezed
class TaskVerified with _$TaskVerified {
  const factory TaskVerified({
    required String task_id,
    required bool verified,
    required String verification_method,
  }) = _TaskVerified;

  factory TaskVerified.fromJson(Map<String, Object?> json) =>
      _$TaskVerifiedFromJson(json);
}
